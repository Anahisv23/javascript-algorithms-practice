3b6bc28a497a147fa25816338de20079
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DoublyLinkedListNode = require('./DoublyLinkedListNode');

var _DoublyLinkedListNode2 = _interopRequireDefault(_DoublyLinkedListNode);

var _Comparator = require('../../utils/Comparator');

var _Comparator2 = _interopRequireDefault(_Comparator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DoublyLinkedList = function () {
    /**
     * @param {Function} [comparatorFunction]
     */
    function DoublyLinkedList(comparatorFunction) {
        _classCallCheck(this, DoublyLinkedList);

        /** @var DoublyLinkedListNode */
        this.head = null;

        /** @var DoublyLinkedListNode */
        this.tail = null;

        this.compare = new _Comparator2.default(comparatorFunction);
    }

    /**
     * @param {*} value
     * @return {DoublyLinkedList}
     */


    _createClass(DoublyLinkedList, [{
        key: 'prepend',
        value: function prepend(value) {
            // Make new node to be a head.
            var newNode = new _DoublyLinkedListNode2.default(value, null, this.head);

            // If there is head, then it won't be head anymore.
            // Therefore, make its previous reference to be new node (new head).
            // Then mark the new node as head
            if (this.head) {
                this.head.previous = newNode;
            }
            this.head = newNode;

            // If there is no tail yet let's make new node a tail.
            if (!this.tail) {
                this.tail = newNode;
            }

            return this;
        }

        /**
         * @param {*} value
         * @return {DoublyLinkedListNode}
         */

    }, {
        key: 'append',
        value: function append(value) {
            // Make new node to be a tail.
            var newNode = new _DoublyLinkedListNode2.default(value, this.tail, null);

            // If there is tail, then it won't be tail anymore.
            // Therefore, make its next reference to be new node (new tail).
            // Then mark the new node as tail
            if (this.tail) {
                this.tail.next = newNode;
            }
            this.tail = newNode;

            // If there is no head yet let's make new node a head.
            if (!this.head) {
                this.head = newNode;
            }

            return this;
        }

        /**
         * @param {*} value
         * @return {DoublyLinkedListNode}
         */

    }, {
        key: 'delete',
        value: function _delete(value) {
            if (!this.head) {
                return null;
            }

            var deletedNode = null;
            var currentNode = this.head;

            while (currentNode) {
                if (this.compare.equal(currentNode.value, value)) {
                    deletedNode = currentNode;

                    if (currentNode.next === null && currentNode.previous === null) {
                        this.head = null;
                        this.tail = null;
                    } else if (currentNode.next === null) {
                        currentNode.previous.next = null;
                        this.tail = currentNode.previous;
                    } else if (currentNode.previous === null) {
                        currentNode.next.previous = null;
                        this.head = currentNode.next;
                    } else {
                        currentNode.previous.next = currentNode.next;
                        currentNode.next.previous = currentNode.previous;
                    }
                }
                currentNode = currentNode.next;
            }

            return deletedNode;
        }

        /**
         * @param {Object} findParams
         * @param {*} findParams.value
         * @param {function} [findParams.callback]
         * @return {DoublyLinkedListNode}
         */

    }, {
        key: 'find',
        value: function find(_ref) {
            var _ref$value = _ref.value,
                value = _ref$value === undefined ? undefined : _ref$value,
                _ref$callback = _ref.callback,
                callback = _ref$callback === undefined ? undefined : _ref$callback;

            if (!this.head) {
                return null;
            }

            var currentNode = this.head;

            while (currentNode) {
                // If callback is specified then try to find node by callback.
                if (callback && callback(currentNode.value)) {
                    return currentNode;
                }

                // If value is specified then try to compare by value.
                if (value !== undefined && this.compare.equal(currentNode.value, value)) {
                    return currentNode;
                }

                currentNode = currentNode.next;
            }

            return null;
        }

        /**
         * @return {DoublyLinkedListNode}
         */

    }, {
        key: 'deleteTail',
        value: function deleteTail() {
            if (!this.tail) {
                return null;
            }

            if (this.head === this.tail) {
                // If There is only one node in linked list.
                var _deletedTail = this.tail;
                this.head = null;
                this.tail = null;

                return _deletedTail;
            }

            // If there are many nodes in linked list.
            var deletedTail = this.tail;

            this.tail = this.tail.previous;
            this.tail.next = null;

            return deletedTail;
        }

        /**
         * @return {DoublyLinkedListNode}
         */

    }, {
        key: 'deleteHead',
        value: function deleteHead() {
            if (!this.head) {
                return null;
            }

            var deletedHead = this.head;
            if (this.head.next) {
                // If There are many nodes in linked list.
                this.head = this.head.next;
                this.head.previous = null;
            } else {
                // If There is only one node in linked list.
                this.head = null;
                this.tail = null;
            }

            return deletedHead;
        }

        /**
         * @return {DoublyLinkedListNode[]}
         */

    }, {
        key: 'toArray',
        value: function toArray() {
            var nodes = [];

            var currentNode = this.head;
            while (currentNode) {
                nodes.push(currentNode);
                currentNode = currentNode.next;
            }

            return nodes;
        }

        /**
         * @param {*[]} values - Array of values that need to be converted to linked list.
         * @return {DoublyLinkedList}
         */

    }, {
        key: 'fromArray',
        value: function fromArray(values) {
            var _this = this;

            values.forEach(function (value) {
                return _this.append(value);
            });

            return this;
        }

        /**
         * @param {function} [callback]
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString(callback) {
            return this.toArray().map(function (node) {
                return node.toString(callback);
            }).toString();
        }

        /**
         * Reverse a linked list.
         * @returns {DoublyLinkedList}
         */

    }, {
        key: 'reverse',
        value: function reverse() {
            var currNode = this.head;
            var prevNode = null;
            var nextNode = null;

            while (currNode) {
                prevNode = currNode.previous;
                nextNode = currNode.next;
                currNode.previous = nextNode;
                currNode.next = prevNode;

                currNode = nextNode;
            }

            prevNode = this.tail;
            this.tail = this.head;
            this.head = prevNode;

            return this;
        }
    }]);

    return DoublyLinkedList;
}();

exports.default = DoublyLinkedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,