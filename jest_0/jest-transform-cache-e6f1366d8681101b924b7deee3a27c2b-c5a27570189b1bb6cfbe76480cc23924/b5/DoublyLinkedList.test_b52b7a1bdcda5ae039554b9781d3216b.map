{"version":3,"sources":["DoublyLinkedList.test.js"],"names":["describe","it","linkedList","DoublyLinkedList","expect","toString","toBe","head","toBeNull","tail","append","next","value","previous","prepend","arrayList","fromArray","delete","deleteTail","deleteHead","key","nodeStringifier","find","toBeDefined","node","callback","comparatorFunction","a","b","customValue","reverse"],"mappings":"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","file":"DoublyLinkedList.test.js","sourcesContent":["import DoublyLinkedList from '../DoublyLinkedList';\n\ndescribe('DoublyLinkedList', () => {\n    it('should create empty linked list', () => {\n        const linkedList = new DoublyLinkedList();\n        expect(linkedList.toString()).toBe('');\n    });\n\n    it('should append node to linked list', () => {\n        const linkedList = new DoublyLinkedList();\n\n        expect(linkedList.head).toBeNull();\n        expect(linkedList.tail).toBeNull();\n\n        linkedList.append(1);\n        linkedList.append(2);\n\n        expect(linkedList.head.next.value).toBe(2);\n        expect(linkedList.tail.previous.value).toBe(1);\n        expect(linkedList.toString()).toBe('1,2');\n    });\n\n    it('should prepend node to linked list', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.prepend(2);\n        linkedList.append(3);\n        linkedList.prepend(1);\n\n        expect(linkedList.head.value).toBe(1);\n        expect(linkedList.tail.value).toBe(3);\n        expect(linkedList.toString()).toBe('1,2,3');\n    });\n\n    it('should create linked list from array', () => {\n        const arrayList = [1, 2, 3];\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.fromArray(arrayList);\n\n        expect(linkedList.head.value).toBe(1);\n        expect(linkedList.tail.value).toBe(3);\n        expect(linkedList.toString()).toBe('1,2,3');\n    });\n\n    it('should delete node by value from linked list', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n\n        linkedList.delete(1);\n        expect(linkedList.head.value).toBe(2);\n\n        linkedList.delete(2);\n        expect(linkedList.head.value).toBe(3);\n\n        linkedList.delete(3);\n        linkedList.delete(4);\n        expect(linkedList.head).toBeNull();\n        expect(linkedList.tail).toBeNull();\n    });\n\n    it('should delete linked list tail', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n\n        linkedList.deleteTail();\n        expect(linkedList.tail.value).toBe(4);\n\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        expect(linkedList.tail.value).toBe(3);\n\n\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        expect(linkedList.toString()).toBe('');\n    });\n\n    it('should delete linked list head', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n        linkedList.append(4);\n\n        linkedList.deleteHead();\n        expect(linkedList.head.value).toBe(2);\n\n        linkedList.deleteHead();\n        expect(linkedList.head.value).toBe(2);\n\n\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        expect(linkedList.head).toBeNull();\n        expect(linkedList.tail).toBeNull();\n    });\n\n    it('should be possible to store objects in the list and to print them out', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList.append({ value: 1, key: 'key1'});\n        linkedList.append({ value: 2, key: 'key2'});\n        \n        expect(linkedList.head.value.value).toBe(1);\n        expect(linkedList.tail.previous.value.key).toBe('key1');\n\n        const nodeStringifier = value => `${value.key}:${value.value}`;\n        expect(linkedList.toString(nodeStringifier)).toBe('key1:1,key2:2');\n    });\n\n    it('should find node by value', () => {\n        const linkedList = new DoublyLinkedList();\n\n        expect(linkedList.find({ value: 5})).toBeNull();\n\n        linkedList.append(1);\n        expect(linkedList.find({ value: 1})).toBeDefined();\n\n        linkedList\n            .append(2)\n            .append(3);\n\n        const node = linkedList.find({ value: 2 });\n\n        expect(node.value).toBe(2);\n        expect(linkedList.find({ value: 5})).toBeNull();\n    });\n\n    it('should find node by callback', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList\n            .append({ value: 1, key: 'key1' })\n            .append({ value: 2, key: 'key2' })\n            .append({ value: 3, key: 'key3' });\n        \n        const node = linkedList.find({ callback: value => value.key === 'key2' });\n\n        expect(node).toBeDefined();\n        expect(node.value.value).toBe(2);\n        expect(node.value.key).toBe('key2');\n        expect(linkedList.find({ callback: value => value.key === 'key5' })).toBeNull();\n    });\n\n    it('should find node by means of custom compare function', () => {\n        const comparatorFunction = (a, b) => {\n            if (a.customValue === b.customValue) {\n                return 0;\n            }\n\n            return a.customValue < b.customValue ? -1 : 1;\n        }\n\n        const linkedList = new DoublyLinkedList(comparatorFunction);\n\n        linkedList\n            .append({ value: 1, customValue: 'test1' })\n            .append({ value: 2, customValue: 'test2' })\n            .append({ value: 3, customValue: 'test3' });\n        \n        const node = linkedList.find({ value: { value: 2, customValue: 'test2'}});\n\n        expect(node).toBeDefined();\n        expect(node.value.value).toBe(2);\n        expect(node.value.customValue).toBe('test2');\n        expect(linkedList.find({ value: { value: 5, customValue: 'test5' }})).toBeNull();\n    });\n\n    it('should reverse linked list', () => {\n        const linkedList = new DoublyLinkedList();\n\n        linkedList\n            .append(1)\n            .append(2)\n            .append(3);\n        \n        expect(linkedList.toString()).toBe('1,2,3');\n\n        linkedList.reverse();\n        expect(linkedList.toString()).toBe('3,2,1');\n\n        linkedList.reverse();\n        expect(linkedList.toString()).toBe('1,2,3');\n    });\n});\n"]}