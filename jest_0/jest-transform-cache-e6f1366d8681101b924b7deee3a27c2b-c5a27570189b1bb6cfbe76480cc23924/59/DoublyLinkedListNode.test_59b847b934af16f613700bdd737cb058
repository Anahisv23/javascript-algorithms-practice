b1409f1c186b9a8d7c18311cd9c38c6e
'use strict';

var _DoublyLinkedListNode = require('../DoublyLinkedListNode');

var _DoublyLinkedListNode2 = _interopRequireDefault(_DoublyLinkedListNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('DoublyLinkedListNode', function () {
    it('should create node with value', function () {
        var node = new _DoublyLinkedListNode2.default(1);

        expect(node.value).toBe(1);
        expect(node.previous).toBeNull();
        expect(node.next).toBeNull();
    });

    it('should create node with object as a value', function () {
        var nodeValue = { value: 1, key: 'test' };
        var node = new _DoublyLinkedListNode2.default(nodeValue);

        expect(node.value.value).toBe(1);
        expect(node.value.key).toBe('test');
        expect(node.next).toBeNull();
        expect(node.previous).toBeNull();
    });

    it('should link nodes together', function () {
        var node1 = new _DoublyLinkedListNode2.default(1);
        var node2 = new _DoublyLinkedListNode2.default(2, node1);
        var node3 = new _DoublyLinkedListNode2.default(3, node2, node1);

        expect(node1.previous).toBeNull();
        expect(node1.next).toBeNull();
        expect(node1.value).toBe(1);
        expect(node2.previous).toBeDefined();
        expect(node2.next).toBeNull();
        expect(node2.value).toBe(2);
        expect(node3.previous).toBeDefined();
        expect(node3.next).toBeDefined();
        expect(node3.value).toBe(3);
        expect(node3.next.value).toBe(1);
        expect(node3.previous.previous.value).toBe(1);
    });

    it('should convert node to string', function () {
        var node = new _DoublyLinkedListNode2.default(1);

        expect(node.toString()).toBe('1');

        node.value = 'string value';
        expect(node.toString()).toBe('string value');
    });

    it('should convert node to string with custom stringifier', function () {
        var nodeValue = { value: 1, key: 'test' };
        var node = new _DoublyLinkedListNode2.default(nodeValue);
        var toStringCallback = function toStringCallback(value) {
            return 'value: ' + value.value + ', key: ' + value.key;
        };

        expect(node.toString(toStringCallback)).toBe('value: 1, key: test');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRvdWJseUxpbmtlZExpc3ROb2RlLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsIm5vZGUiLCJEb3VibHlMaW5rZWRMaXN0Tm9kZSIsImV4cGVjdCIsInZhbHVlIiwidG9CZSIsInByZXZpb3VzIiwidG9CZU51bGwiLCJuZXh0Iiwibm9kZVZhbHVlIiwia2V5Iiwibm9kZTEiLCJub2RlMiIsIm5vZGUzIiwidG9CZURlZmluZWQiLCJ0b1N0cmluZyIsInRvU3RyaW5nQ2FsbGJhY2siXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBQSxTQUFTLHNCQUFULEVBQWlDLFlBQU07QUFDbkNDLE9BQUcsK0JBQUgsRUFBb0MsWUFBTTtBQUN0QyxZQUFNQyxPQUFPLElBQUlDLDhCQUFKLENBQXlCLENBQXpCLENBQWI7O0FBRUFDLGVBQU9GLEtBQUtHLEtBQVosRUFBbUJDLElBQW5CLENBQXdCLENBQXhCO0FBQ0FGLGVBQU9GLEtBQUtLLFFBQVosRUFBc0JDLFFBQXRCO0FBQ0FKLGVBQU9GLEtBQUtPLElBQVosRUFBa0JELFFBQWxCO0FBQ0gsS0FORDs7QUFRQVAsT0FBRywyQ0FBSCxFQUFnRCxZQUFNO0FBQ2xELFlBQU1TLFlBQVksRUFBRUwsT0FBTyxDQUFULEVBQVlNLEtBQUssTUFBakIsRUFBbEI7QUFDQSxZQUFNVCxPQUFPLElBQUlDLDhCQUFKLENBQXlCTyxTQUF6QixDQUFiOztBQUVBTixlQUFPRixLQUFLRyxLQUFMLENBQVdBLEtBQWxCLEVBQXlCQyxJQUF6QixDQUE4QixDQUE5QjtBQUNBRixlQUFPRixLQUFLRyxLQUFMLENBQVdNLEdBQWxCLEVBQXVCTCxJQUF2QixDQUE0QixNQUE1QjtBQUNBRixlQUFPRixLQUFLTyxJQUFaLEVBQWtCRCxRQUFsQjtBQUNBSixlQUFPRixLQUFLSyxRQUFaLEVBQXNCQyxRQUF0QjtBQUNILEtBUkQ7O0FBVUFQLE9BQUcsNEJBQUgsRUFBaUMsWUFBTTtBQUNuQyxZQUFNVyxRQUFRLElBQUlULDhCQUFKLENBQXlCLENBQXpCLENBQWQ7QUFDQSxZQUFNVSxRQUFRLElBQUlWLDhCQUFKLENBQXlCLENBQXpCLEVBQTRCUyxLQUE1QixDQUFkO0FBQ0EsWUFBTUUsUUFBUSxJQUFJWCw4QkFBSixDQUF5QixDQUF6QixFQUE0QlUsS0FBNUIsRUFBbUNELEtBQW5DLENBQWQ7O0FBRUFSLGVBQU9RLE1BQU1MLFFBQWIsRUFBdUJDLFFBQXZCO0FBQ0FKLGVBQU9RLE1BQU1ILElBQWIsRUFBbUJELFFBQW5CO0FBQ0FKLGVBQU9RLE1BQU1QLEtBQWIsRUFBb0JDLElBQXBCLENBQXlCLENBQXpCO0FBQ0FGLGVBQU9TLE1BQU1OLFFBQWIsRUFBdUJRLFdBQXZCO0FBQ0FYLGVBQU9TLE1BQU1KLElBQWIsRUFBbUJELFFBQW5CO0FBQ0FKLGVBQU9TLE1BQU1SLEtBQWIsRUFBb0JDLElBQXBCLENBQXlCLENBQXpCO0FBQ0FGLGVBQU9VLE1BQU1QLFFBQWIsRUFBdUJRLFdBQXZCO0FBQ0FYLGVBQU9VLE1BQU1MLElBQWIsRUFBbUJNLFdBQW5CO0FBQ0FYLGVBQU9VLE1BQU1ULEtBQWIsRUFBb0JDLElBQXBCLENBQXlCLENBQXpCO0FBQ0FGLGVBQU9VLE1BQU1MLElBQU4sQ0FBV0osS0FBbEIsRUFBeUJDLElBQXpCLENBQThCLENBQTlCO0FBQ0FGLGVBQU9VLE1BQU1QLFFBQU4sQ0FBZUEsUUFBZixDQUF3QkYsS0FBL0IsRUFBc0NDLElBQXRDLENBQTJDLENBQTNDO0FBQ0gsS0FoQkQ7O0FBa0JBTCxPQUFHLCtCQUFILEVBQW9DLFlBQU07QUFDdEMsWUFBTUMsT0FBTyxJQUFJQyw4QkFBSixDQUF5QixDQUF6QixDQUFiOztBQUVBQyxlQUFPRixLQUFLYyxRQUFMLEVBQVAsRUFBd0JWLElBQXhCLENBQTZCLEdBQTdCOztBQUVBSixhQUFLRyxLQUFMLEdBQWEsY0FBYjtBQUNBRCxlQUFPRixLQUFLYyxRQUFMLEVBQVAsRUFBd0JWLElBQXhCLENBQTZCLGNBQTdCO0FBQ0gsS0FQRDs7QUFTQUwsT0FBRyx1REFBSCxFQUE0RCxZQUFNO0FBQzlELFlBQU1TLFlBQVksRUFBRUwsT0FBTyxDQUFULEVBQVlNLEtBQUssTUFBakIsRUFBbEI7QUFDQSxZQUFNVCxPQUFRLElBQUlDLDhCQUFKLENBQXlCTyxTQUF6QixDQUFkO0FBQ0EsWUFBTU8sbUJBQW1CLFNBQW5CQSxnQkFBbUI7QUFBQSwrQkFBbUJaLE1BQU1BLEtBQXpCLGVBQXdDQSxNQUFNTSxHQUE5QztBQUFBLFNBQXpCOztBQUVBUCxlQUFPRixLQUFLYyxRQUFMLENBQWNDLGdCQUFkLENBQVAsRUFBd0NYLElBQXhDLENBQTZDLHFCQUE3QztBQUNILEtBTkQ7QUFPSCxDQXJERCIsImZpbGUiOiJEb3VibHlMaW5rZWRMaXN0Tm9kZS50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERvdWJseUxpbmtlZExpc3ROb2RlIGZyb20gJy4uL0RvdWJseUxpbmtlZExpc3ROb2RlJztcblxuZGVzY3JpYmUoJ0RvdWJseUxpbmtlZExpc3ROb2RlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIG5vZGUgd2l0aCB2YWx1ZScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBEb3VibHlMaW5rZWRMaXN0Tm9kZSgxKTtcblxuICAgICAgICBleHBlY3Qobm9kZS52YWx1ZSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KG5vZGUucHJldmlvdXMpLnRvQmVOdWxsKCk7XG4gICAgICAgIGV4cGVjdChub2RlLm5leHQpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBub2RlIHdpdGggb2JqZWN0IGFzIGEgdmFsdWUnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVWYWx1ZSA9IHsgdmFsdWU6IDEsIGtleTogJ3Rlc3QnIH07XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgRG91Ymx5TGlua2VkTGlzdE5vZGUobm9kZVZhbHVlKTtcblxuICAgICAgICBleHBlY3Qobm9kZS52YWx1ZS52YWx1ZSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KG5vZGUudmFsdWUua2V5KS50b0JlKCd0ZXN0Jyk7XG4gICAgICAgIGV4cGVjdChub2RlLm5leHQpLnRvQmVOdWxsKCk7XG4gICAgICAgIGV4cGVjdChub2RlLnByZXZpb3VzKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsaW5rIG5vZGVzIHRvZ2V0aGVyJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBub2RlMSA9IG5ldyBEb3VibHlMaW5rZWRMaXN0Tm9kZSgxKTtcbiAgICAgICAgY29uc3Qgbm9kZTIgPSBuZXcgRG91Ymx5TGlua2VkTGlzdE5vZGUoMiwgbm9kZTEpO1xuICAgICAgICBjb25zdCBub2RlMyA9IG5ldyBEb3VibHlMaW5rZWRMaXN0Tm9kZSgzLCBub2RlMiwgbm9kZTEpO1xuXG4gICAgICAgIGV4cGVjdChub2RlMS5wcmV2aW91cykudG9CZU51bGwoKTtcbiAgICAgICAgZXhwZWN0KG5vZGUxLm5leHQpLnRvQmVOdWxsKCk7XG4gICAgICAgIGV4cGVjdChub2RlMS52YWx1ZSkudG9CZSgxKTsgICAgICAgIFxuICAgICAgICBleHBlY3Qobm9kZTIucHJldmlvdXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChub2RlMi5uZXh0KS50b0JlTnVsbCgpO1xuICAgICAgICBleHBlY3Qobm9kZTIudmFsdWUpLnRvQmUoMik7XG4gICAgICAgIGV4cGVjdChub2RlMy5wcmV2aW91cykudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KG5vZGUzLm5leHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChub2RlMy52YWx1ZSkudG9CZSgzKTtcbiAgICAgICAgZXhwZWN0KG5vZGUzLm5leHQudmFsdWUpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChub2RlMy5wcmV2aW91cy5wcmV2aW91cy52YWx1ZSkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY29udmVydCBub2RlIHRvIHN0cmluZycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBEb3VibHlMaW5rZWRMaXN0Tm9kZSgxKTtcblxuICAgICAgICBleHBlY3Qobm9kZS50b1N0cmluZygpKS50b0JlKCcxJyk7XG5cbiAgICAgICAgbm9kZS52YWx1ZSA9ICdzdHJpbmcgdmFsdWUnO1xuICAgICAgICBleHBlY3Qobm9kZS50b1N0cmluZygpKS50b0JlKCdzdHJpbmcgdmFsdWUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY29udmVydCBub2RlIHRvIHN0cmluZyB3aXRoIGN1c3RvbSBzdHJpbmdpZmllcicsICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZVZhbHVlID0geyB2YWx1ZTogMSwga2V5OiAndGVzdCcgfTtcbiAgICAgICAgY29uc3Qgbm9kZSA9ICBuZXcgRG91Ymx5TGlua2VkTGlzdE5vZGUobm9kZVZhbHVlKTtcbiAgICAgICAgY29uc3QgdG9TdHJpbmdDYWxsYmFjayA9IHZhbHVlID0+IGB2YWx1ZTogJHt2YWx1ZS52YWx1ZX0sIGtleTogJHt2YWx1ZS5rZXl9YDtcblxuICAgICAgICBleHBlY3Qobm9kZS50b1N0cmluZyh0b1N0cmluZ0NhbGxiYWNrKSkudG9CZSgndmFsdWU6IDEsIGtleTogdGVzdCcpO1xuICAgIH0pO1xufSk7Il19