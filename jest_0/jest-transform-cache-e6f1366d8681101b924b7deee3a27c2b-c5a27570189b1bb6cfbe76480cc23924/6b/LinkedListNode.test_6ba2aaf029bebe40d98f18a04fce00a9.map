{"version":3,"sources":["LinkedListNode.test.js"],"names":["describe","it","node","LinkedListNode","expect","value","toBe","next","toBeNull","nodeValue","key","node2","node1","toBeDefined","toString","toStringCallback"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,gBAAT,EAA2B,YAAM;AAC7BC,OAAG,oCAAH,EAAyC,YAAM;AAC3C,YAAMC,OAAO,IAAIC,wBAAJ,CAAmB,CAAnB,CAAb;;AAEAC,eAAOF,KAAKG,KAAZ,EAAmBC,IAAnB,CAAwB,CAAxB;AACAF,eAAOF,KAAKK,IAAZ,EAAkBC,QAAlB;AACH,KALD;;AAOAP,OAAG,gDAAH,EAAqD,YAAM;AACvD,YAAMQ,YAAY,EAAEJ,OAAO,CAAT,EAAYK,KAAK,MAAjB,EAAlB;AACA,YAAMR,OAAO,IAAIC,wBAAJ,CAAmBM,SAAnB,CAAb;;AAEAL,eAAOF,KAAKG,KAAL,CAAWA,KAAlB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,eAAOF,KAAKG,KAAL,CAAWK,GAAlB,EAAuBJ,IAAvB,CAA4B,MAA5B;AACAF,eAAOF,KAAKK,IAAZ,EAAkBC,QAAlB;AACH,KAPD;;AASAP,OAAG,4BAAH,EAAiC,YAAM;AACnC,YAAMU,QAAQ,IAAIR,wBAAJ,CAAmB,CAAnB,CAAd;AACA,YAAMS,QAAQ,IAAIT,wBAAJ,CAAmB,CAAnB,EAAsBQ,KAAtB,CAAd;;AAEAP,eAAOQ,MAAML,IAAb,EAAmBM,WAAnB;AACAT,eAAOO,MAAMJ,IAAb,EAAmBC,QAAnB;AACAJ,eAAOQ,MAAMP,KAAb,EAAoBC,IAApB,CAAyB,CAAzB;AACAF,eAAOQ,MAAML,IAAN,CAAWF,KAAlB,EAAyBC,IAAzB,CAA8B,CAA9B;AACH,KARD;;AAUAL,OAAG,+BAAH,EAAoC,YAAM;AACtC,YAAMC,OAAO,IAAIC,wBAAJ,CAAmB,CAAnB,CAAb;;AAEAC,eAAOF,KAAKY,QAAL,EAAP,EAAwBR,IAAxB,CAA6B,GAA7B;;AAEAJ,aAAKG,KAAL,GAAa,cAAb;AACAD,eAAOF,KAAKY,QAAL,EAAP,EAAwBR,IAAxB,CAA6B,cAA7B;AACH,KAPD;;AASAL,OAAG,uDAAH,EAA4D,YAAM;AAC9D,YAAMQ,YAAY,EAAEJ,OAAO,CAAT,EAAYK,KAAK,MAAjB,EAAlB;AACA,YAAMR,OAAO,IAAIC,wBAAJ,CAAmBM,SAAnB,CAAb;AACA,YAAMM,mBAAmB,SAAnBA,gBAAmB;AAAA,+BAAmBV,MAAMA,KAAzB,eAAwCA,MAAMK,GAA9C;AAAA,SAAzB;;AAEAN,eAAOF,KAAKY,QAAL,CAAcC,gBAAd,CAAP,EAAwCT,IAAxC,CAA6C,qBAA7C;AACH,KAND;AAOH,CA3CD","file":"LinkedListNode.test.js","sourcesContent":["import LinkedListNode from '../LinkedListNode';\n\ndescribe('LinkedListNode', () => {\n    it('should create list node with value', () => {\n        const node = new LinkedListNode(1);\n        \n        expect(node.value).toBe(1);\n        expect(node.next).toBeNull();\n    });\n\n    it('should create list node with object as a value', () => {\n        const nodeValue = { value: 1, key: 'test' };\n        const node = new LinkedListNode(nodeValue);\n\n        expect(node.value.value).toBe(1);\n        expect(node.value.key).toBe('test');\n        expect(node.next).toBeNull();\n    });\n\n    it('should link nodes together', () => {\n        const node2 = new LinkedListNode(2);\n        const node1 = new LinkedListNode(1, node2);\n\n        expect(node1.next).toBeDefined();\n        expect(node2.next).toBeNull();\n        expect(node1.value).toBe(1);\n        expect(node1.next.value).toBe(2);\n    });\n\n    it('should convert node to string', () => {\n        const node = new LinkedListNode(1);\n\n        expect(node.toString()).toBe('1');\n\n        node.value = 'string value';\n        expect(node.toString()).toBe('string value');\n    });\n\n    it('should convert node to string with custom stringifier', () => {\n        const nodeValue = { value: 1, key: 'test' };\n        const node = new LinkedListNode(nodeValue);\n        const toStringCallback = value => `value: ${value.value}, key: ${value.key}`;\n\n        expect(node.toString(toStringCallback)).toBe('value: 1, key: test');\n    });\n});"]}