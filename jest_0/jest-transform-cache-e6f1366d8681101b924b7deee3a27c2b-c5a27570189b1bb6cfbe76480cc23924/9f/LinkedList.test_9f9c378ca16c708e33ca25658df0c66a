dcb5b74db214a5506b28adbc51e82cf9
'use strict';

var _LinkedList = require('../LinkedList');

var _LinkedList2 = _interopRequireDefault(_LinkedList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('LinkedList', function () {
    it('should create empty linked list', function () {
        var linkedList = new _LinkedList2.default();
        expect(linkedList.toString()).toBe('');
    });

    it('should prepend node to linked list', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.prepend(2);

        expect(linkedList.head.toString()).toBe('2');
        expect(linkedList.tail.toString()).toBe('2');

        linkedList.append(1);
        linkedList.prepend(3);

        expect(linkedList.toString()).toBe('3,2,1');
    });

    it('should append node to linked list', function () {
        var linkedList = new _LinkedList2.default();

        expect(linkedList.head).toBeNull();
        expect(linkedList.tail).toBeNull();

        linkedList.append(1);
        linkedList.append(2);

        expect(linkedList.toString()).toBe('1,2');
        expect(linkedList.tail.next).toBeNull();
    });

    it('should be possible to store objects in the list and to print them out', function () {
        var linkedList = new _LinkedList2.default();

        var nodeValue1 = { value: 1, key: 'key1' };
        var nodeValue2 = { value: 2, key: 'key2' };
        linkedList.append(nodeValue1).prepend(nodeValue2);
        var nodeStringifier = function nodeStringifier(value) {
            return value.key + ':' + value.value;
        };
        expect(linkedList.toString(nodeStringifier)).toBe('key2:2,key1:1');
    });

    it('should find node by value', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        linkedList.append(4);
        expect(linkedList.find({ value: 1 }).toString()).toBe('1');
        expect(linkedList.find({ value: 5 })).toBeNull();
    });

    it('should find node by callback', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        linkedList.append(4);

        var equalOne = function equalOne(value) {
            return value === 1;
        };
        var equalFive = function equalFive(value) {
            return value === 5;
        };
        expect(linkedList.find({ callback: equalOne }).toString()).toBe('1');
        expect(linkedList.find({ callback: equalFive })).toBeNull();
    });

    it('should find node by means of custom compare function', function () {
        var comparatorFunction = function comparatorFunction(a, b) {
            if (a.customValue === b.customValue) {
                return 0;
            }

            return a.customValue < b.customValue ? -1 : 1;
        };

        var linkedList = new _LinkedList2.default(comparatorFunction);
        linkedList.append({ value: 1, customValue: 'test1' }).append({ value: 2, customValue: 'test2' }).append({ value: 3, customValue: 'test3' });

        var node = linkedList.find({
            value: { value: 2, customValue: 'test2' }
        });

        expect(node).toBeDefined();
        expect(node.value.value).toBe(2);
        expect(node.value.customValue).toBe('test2');
        expect(linkedList.find({ value: 2, customValue: 'test5' })).toBeNull();
    });

    it('should delete node by value from linked list', function () {
        var linkedList = new _LinkedList2.default();

        expect(linkedList.delete(5)).toBeNull();

        linkedList.append(1);
        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        linkedList.append(3);
        linkedList.append(3);
        linkedList.append(4);
        linkedList.append(5);
        expect(linkedList.head.toString()).toBe('1');
        expect(linkedList.tail.toString()).toBe('5');

        var deletedNode = linkedList.delete(3);
        expect(deletedNode.value).toBe(3);
        expect(linkedList.toString()).toBe('1,1,2,4,5');

        linkedList.delete(1);
        expect(linkedList.toString()).toBe('2,4,5');

        linkedList.delete(2);
        expect(linkedList.toString()).toBe('4,5');

        linkedList.delete(4);
        expect(linkedList.toString()).toBe('5');

        linkedList.delete(5);
        expect(linkedList.toString()).toBe('');
    });

    it('should delete tail node from linked list', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        expect(linkedList.tail.toString()).toBe('3');

        linkedList.deleteTail();
        expect(linkedList.tail.toString()).toBe('2');

        linkedList.deleteTail();
        linkedList.deleteTail();
        expect(linkedList.tail).toBeNull();
    });

    it('should delete head node from linked list', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        expect(linkedList.head.toString()).toBe('1');

        linkedList.deleteHead();
        expect(linkedList.head.toString()).toBe('2');

        linkedList.deleteHead();
        linkedList.deleteHead();
        expect(linkedList.head).toBeNull();
    });

    it('should make linked list from array list', function () {
        var linkedList = new _LinkedList2.default();
        var arrayList = [1, 2, 3, 4];
        expect(linkedList.fromArray(arrayList).toString()).toBe('1,2,3,4');
    });

    it('should reverse list from linked list', function () {
        var linkedList = new _LinkedList2.default();

        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        linkedList.append(4);
        expect(linkedList.reverse().toString()).toBe('4,3,2,1');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,