{"version":3,"sources":["LinkedList.test.js"],"names":["describe","it","linkedList","LinkedList","expect","toString","toBe","prepend","head","tail","append","toBeNull","next","nodeValue1","value","key","nodeValue2","nodeStringifier","find","equalOne","equalFive","callback","comparatorFunction","a","b","customValue","node","toBeDefined","delete","deletedNode","deleteTail","deleteHead","arrayList","fromArray","reverse"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,YAAT,EAAuB,YAAM;AACzBC,OAAG,iCAAH,EAAsC,YAAM;AACxC,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;AACAC,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,EAAnC;AACH,KAHD;;AAKAL,OAAG,oCAAH,EAAyC,YAAM;AAC3C,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWK,OAAX,CAAmB,CAAnB;;AAEAH,eAAOF,WAAWM,IAAX,CAAgBH,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;AACAF,eAAOF,WAAWO,IAAX,CAAgBJ,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEAJ,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWK,OAAX,CAAmB,CAAnB;;AAEAH,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,OAAnC;AACH,KAZD;;AAcAL,OAAG,mCAAH,EAAwC,YAAM;AAC1C,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAC,eAAOF,WAAWM,IAAlB,EAAwBG,QAAxB;AACAP,eAAOF,WAAWO,IAAlB,EAAwBE,QAAxB;;AAEAT,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;;AAEAN,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,KAAnC;AACAF,eAAOF,WAAWO,IAAX,CAAgBG,IAAvB,EAA6BD,QAA7B;AACH,KAXD;;AAaAV,OAAG,uEAAH,EAA4E,YAAM;AAC9E,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEA,YAAMU,aAAa,EAAEC,OAAO,CAAT,EAAYC,KAAK,MAAjB,EAAnB;AACA,YAAMC,aAAa,EAAEF,OAAO,CAAT,EAAYC,KAAK,MAAjB,EAAnB;AACAb,mBACKQ,MADL,CACYG,UADZ,EAEKN,OAFL,CAEaS,UAFb;AAGA,YAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,mBAAYH,MAAMC,GAAlB,SAAyBD,MAAMA,KAA/B;AAAA,SAAxB;AACAV,eAAOF,WAAWG,QAAX,CAAoBY,eAApB,CAAP,EAA6CX,IAA7C,CAAkD,eAAlD;AACH,KAVD;;AAYAL,OAAG,2BAAH,EAAgC,YAAM;AAClC,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAN,eAAOF,WAAWgB,IAAX,CAAgB,EAAEJ,OAAO,CAAT,EAAhB,EAA8BT,QAA9B,EAAP,EAAiDC,IAAjD,CAAsD,GAAtD;AACAF,eAAOF,WAAWgB,IAAX,CAAgB,EAAEJ,OAAO,CAAT,EAAhB,CAAP,EAAqCH,QAArC;AACH,KATD;;AAWAV,OAAG,8BAAH,EAAmC,YAAM;AACrC,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;;AAEA,YAAMS,WAAW,SAAXA,QAAW,CAACL,KAAD;AAAA,mBAAWA,UAAU,CAArB;AAAA,SAAjB;AACA,YAAMM,YAAY,SAAZA,SAAY,CAACN,KAAD;AAAA,mBAAWA,UAAU,CAArB;AAAA,SAAlB;AACAV,eAAOF,WAAWgB,IAAX,CAAgB,EAAEG,UAAUF,QAAZ,EAAhB,EAAwCd,QAAxC,EAAP,EAA2DC,IAA3D,CAAgE,GAAhE;AACAF,eAAOF,WAAWgB,IAAX,CAAgB,EAAEG,UAAUD,SAAZ,EAAhB,CAAP,EAAiDT,QAAjD;AACH,KAZD;;AAcAV,OAAG,sDAAH,EAA2D,YAAM;AAC7D,YAAMqB,qBAAqB,SAArBA,kBAAqB,CAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,gBAAID,EAAEE,WAAF,KAAkBD,EAAEC,WAAxB,EAAqC;AACjC,uBAAO,CAAP;AACH;;AAED,mBAAOF,EAAEE,WAAF,GAAgBD,EAAEC,WAAlB,GAAgC,CAAC,CAAjC,GAAqC,CAA5C;AACH,SAND;;AAQA,YAAMvB,aAAa,IAAIC,oBAAJ,CAAemB,kBAAf,CAAnB;AACApB,mBACKQ,MADL,CACY,EAAEI,OAAO,CAAT,EAAYW,aAAa,OAAzB,EADZ,EAEKf,MAFL,CAEY,EAAEI,OAAO,CAAT,EAAYW,aAAa,OAAzB,EAFZ,EAGKf,MAHL,CAGY,EAAEI,OAAO,CAAT,EAAYW,aAAa,OAAzB,EAHZ;;AAKA,YAAMC,OAAOxB,WAAWgB,IAAX,CAAgB;AACzBJ,mBAAO,EAAEA,OAAO,CAAT,EAAYW,aAAa,OAAzB;AADkB,SAAhB,CAAb;;AAIArB,eAAOsB,IAAP,EAAaC,WAAb;AACAvB,eAAOsB,KAAKZ,KAAL,CAAWA,KAAlB,EAAyBR,IAAzB,CAA8B,CAA9B;AACAF,eAAOsB,KAAKZ,KAAL,CAAWW,WAAlB,EAA+BnB,IAA/B,CAAoC,OAApC;AACAF,eAAOF,WAAWgB,IAAX,CAAgB,EAAEJ,OAAO,CAAT,EAAYW,aAAa,OAAzB,EAAhB,CAAP,EAA4Dd,QAA5D;AACH,KAvBD;;AAyBAV,OAAG,8CAAH,EAAmD,YAAM;AACrD,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAC,eAAOF,WAAW0B,MAAX,CAAkB,CAAlB,CAAP,EAA6BjB,QAA7B;;AAEAT,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAN,eAAOF,WAAWM,IAAX,CAAgBH,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;AACAF,eAAOF,WAAWO,IAAX,CAAgBJ,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEA,YAAMuB,cAAc3B,WAAW0B,MAAX,CAAkB,CAAlB,CAApB;AACAxB,eAAOyB,YAAYf,KAAnB,EAA0BR,IAA1B,CAA+B,CAA/B;AACAF,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,WAAnC;;AAEAJ,mBAAW0B,MAAX,CAAkB,CAAlB;AACAxB,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,OAAnC;;AAEAJ,mBAAW0B,MAAX,CAAkB,CAAlB;AACAxB,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,KAAnC;;AAEAJ,mBAAW0B,MAAX,CAAkB,CAAlB;AACAxB,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,GAAnC;;AAEAJ,mBAAW0B,MAAX,CAAkB,CAAlB;AACAxB,eAAOF,WAAWG,QAAX,EAAP,EAA8BC,IAA9B,CAAmC,EAAnC;AACH,KA/BD;;AAiCAL,OAAG,0CAAH,EAA+C,YAAM;AACjD,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAN,eAAOF,WAAWO,IAAX,CAAgBJ,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEAJ,mBAAW4B,UAAX;AACA1B,eAAOF,WAAWO,IAAX,CAAgBJ,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEAJ,mBAAW4B,UAAX;AACA5B,mBAAW4B,UAAX;AACA1B,eAAOF,WAAWO,IAAlB,EAAwBE,QAAxB;AACH,KAdD;;AAgBAV,OAAG,0CAAH,EAA+C,YAAM;AACjD,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAN,eAAOF,WAAWM,IAAX,CAAgBH,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEAJ,mBAAW6B,UAAX;AACA3B,eAAOF,WAAWM,IAAX,CAAgBH,QAAhB,EAAP,EAAmCC,IAAnC,CAAwC,GAAxC;;AAEAJ,mBAAW6B,UAAX;AACA7B,mBAAW6B,UAAX;AACA3B,eAAOF,WAAWM,IAAlB,EAAwBG,QAAxB;AACH,KAdD;;AAgBAV,OAAG,yCAAH,EAA8C,YAAM;AAChD,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;AACA,YAAM6B,YAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAlB;AACA5B,eAAOF,WAAW+B,SAAX,CAAqBD,SAArB,EAAgC3B,QAAhC,EAAP,EAAmDC,IAAnD,CAAwD,SAAxD;AACH,KAJD;;AAMAL,OAAG,sCAAH,EAA2C,YAAM;AAC7C,YAAMC,aAAa,IAAIC,oBAAJ,EAAnB;;AAEAD,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAR,mBAAWQ,MAAX,CAAkB,CAAlB;AACAN,eAAOF,WAAWgC,OAAX,GAAqB7B,QAArB,EAAP,EAAwCC,IAAxC,CAA6C,SAA7C;AACH,KARD;AASH,CA/KD","file":"LinkedList.test.js","sourcesContent":["import LinkedList from '../LinkedList';\n\ndescribe('LinkedList', () => {\n    it('should create empty linked list', () => {\n        const linkedList = new LinkedList();\n        expect(linkedList.toString()).toBe('');\n    });\n\n    it('should prepend node to linked list', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.prepend(2);\n        \n        expect(linkedList.head.toString()).toBe('2');\n        expect(linkedList.tail.toString()).toBe('2');\n\n        linkedList.append(1);\n        linkedList.prepend(3)\n\n        expect(linkedList.toString()).toBe('3,2,1');\n    });\n\n    it('should append node to linked list', () => {\n        const linkedList = new LinkedList();\n\n        expect(linkedList.head).toBeNull();\n        expect(linkedList.tail).toBeNull();\n\n        linkedList.append(1);\n        linkedList.append(2);\n\n        expect(linkedList.toString()).toBe('1,2');\n        expect(linkedList.tail.next).toBeNull();\n    });\n\n    it('should be possible to store objects in the list and to print them out', () => {\n        const linkedList = new LinkedList();\n\n        const nodeValue1 = { value: 1, key: 'key1' };\n        const nodeValue2 = { value: 2, key: 'key2' };\n        linkedList\n            .append(nodeValue1)\n            .prepend(nodeValue2);\n        const nodeStringifier = value => `${value.key}:${value.value}`;\n        expect(linkedList.toString(nodeStringifier)).toBe('key2:2,key1:1');\n    });\n\n    it('should find node by value', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(4);\n        expect(linkedList.find({ value: 1 }).toString()).toBe('1');\n        expect(linkedList.find({ value: 5})).toBeNull();\n    });\n\n    it('should find node by callback', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(4);\n\n        const equalOne = (value) => value === 1;\n        const equalFive = (value) => value === 5;\n        expect(linkedList.find({ callback: equalOne }).toString()).toBe('1')\n        expect(linkedList.find({ callback: equalFive })).toBeNull();\n    });\n\n    it('should find node by means of custom compare function', () => {\n        const comparatorFunction = (a, b) => {\n            if (a.customValue === b.customValue) {\n                return 0;\n            }\n\n            return a.customValue < b.customValue ? -1 : 1;\n        };\n\n        const linkedList = new LinkedList(comparatorFunction);\n        linkedList\n            .append({ value: 1, customValue: 'test1'})\n            .append({ value: 2, customValue: 'test2'})\n            .append({ value: 3, customValue: 'test3'});\n\n        const node = linkedList.find({\n            value: { value: 2, customValue: 'test2' }\n        });\n\n        expect(node).toBeDefined();\n        expect(node.value.value).toBe(2);\n        expect(node.value.customValue).toBe('test2');\n        expect(linkedList.find({ value: 2, customValue: 'test5' })).toBeNull();\n    });\n\n    it('should delete node by value from linked list', () => {\n        const linkedList = new LinkedList();\n\n        expect(linkedList.delete(5)).toBeNull();\n\n        linkedList.append(1);\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(3);\n        linkedList.append(4);\n        linkedList.append(5);\n        expect(linkedList.head.toString()).toBe('1');\n        expect(linkedList.tail.toString()).toBe('5');\n        \n        const deletedNode = linkedList.delete(3);\n        expect(deletedNode.value).toBe(3);\n        expect(linkedList.toString()).toBe('1,1,2,4,5');\n\n        linkedList.delete(1);\n        expect(linkedList.toString()).toBe('2,4,5');\n    \n        linkedList.delete(2);\n        expect(linkedList.toString()).toBe('4,5');\n\n        linkedList.delete(4);\n        expect(linkedList.toString()).toBe('5');\n\n        linkedList.delete(5);\n        expect(linkedList.toString()).toBe('');\n    });\n\n    it('should delete tail node from linked list', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        expect(linkedList.tail.toString()).toBe('3');\n\n        linkedList.deleteTail();\n        expect(linkedList.tail.toString()).toBe('2')\n\n        linkedList.deleteTail();\n        linkedList.deleteTail();\n        expect(linkedList.tail).toBeNull();\n    });\n\n    it('should delete head node from linked list', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        expect(linkedList.head.toString()).toBe('1');\n\n        linkedList.deleteHead();\n        expect(linkedList.head.toString()).toBe('2');\n        \n        linkedList.deleteHead();\n        linkedList.deleteHead();\n        expect(linkedList.head).toBeNull();\n    });\n\n    it('should make linked list from array list', () => {\n        const linkedList = new LinkedList();\n        const arrayList = [1, 2, 3, 4];\n        expect(linkedList.fromArray(arrayList).toString()).toBe('1,2,3,4');\n    });\n\n    it('should reverse list from linked list', () => {\n        const linkedList = new LinkedList();\n\n        linkedList.append(1);\n        linkedList.append(2);\n        linkedList.append(3);\n        linkedList.append(4);\n        expect(linkedList.reverse().toString()).toBe('4,3,2,1');\n    });\n})"]}