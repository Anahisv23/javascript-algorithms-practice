{"version":3,"sources":["Queue.test.js"],"names":["describe","it","queue","Queue","expect","not","toBeNull","linkedList","enqueue","toString","toBe","value","key","stringifier","dequeue","peek","isEmpty"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;AACAC,WAAOF,KAAP,EAAcG,GAAd,CAAkBC,QAAlB;AACAF,WAAOF,MAAMK,UAAb,EAAyBF,GAAzB,CAA6BC,QAA7B;AACD,GAJD;;AAMAL,KAAG,8BAAH,EAAmC,YAAM;AACvC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,OAAN,CAAc,CAAd;AACAN,UAAMM,OAAN,CAAc,CAAd;;AAEAJ,WAAOF,MAAMO,QAAN,EAAP,EAAyBC,IAAzB,CAA8B,KAA9B;AACD,GAPD;;AASAT,KAAG,+CAAH,EAAoD,YAAM;AACxD,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,OAAN,CAAc,EAAEG,OAAO,OAAT,EAAkBC,KAAK,MAAvB,EAAd;AACAV,UAAMM,OAAN,CAAc,EAAEG,OAAO,OAAT,EAAkBC,KAAK,MAAvB,EAAd;;AAEA,QAAMC,cAAc,SAAdA,WAAc;AAAA,aAAYF,MAAMC,GAAlB,SAAyBD,MAAMA,KAA/B;AAAA,KAApB;;AAEAP,WAAOF,MAAMO,QAAN,CAAeI,WAAf,CAAP,EAAoCH,IAApC,CAAyC,uBAAzC;AACAN,WAAOF,MAAMY,OAAN,GAAgBH,KAAvB,EAA8BD,IAA9B,CAAmC,OAAnC;AACAN,WAAOF,MAAMY,OAAN,GAAgBH,KAAvB,EAA8BD,IAA9B,CAAmC,OAAnC;AACD,GAXD;;AAaAT,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAC,WAAOF,MAAMa,IAAN,EAAP,EAAqBT,QAArB;;AAEAJ,UAAMM,OAAN,CAAc,CAAd;AACAN,UAAMM,OAAN,CAAc,CAAd;;AAEAJ,WAAOF,MAAMa,IAAN,EAAP,EAAqBL,IAArB,CAA0B,CAA1B;AACAN,WAAOF,MAAMa,IAAN,EAAP,EAAqBL,IAArB,CAA0B,CAA1B;AACD,GAVD;;AAYAT,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAC,WAAOF,MAAMc,OAAN,EAAP,EAAwBN,IAAxB,CAA6B,IAA7B;;AAEAR,UAAMM,OAAN,CAAc,CAAd;;AAEAJ,WAAOF,MAAMc,OAAN,EAAP,EAAwBN,IAAxB,CAA6B,KAA7B;AACD,GARD;;AAUAT,KAAG,yCAAH,EAA8C,YAAM;AAClD,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,OAAN,CAAc,CAAd;AACAN,UAAMM,OAAN,CAAc,CAAd;;AAEAJ,WAAOF,MAAMY,OAAN,EAAP,EAAwBJ,IAAxB,CAA6B,CAA7B;AACAN,WAAOF,MAAMY,OAAN,EAAP,EAAwBJ,IAAxB,CAA6B,CAA7B;AACAN,WAAOF,MAAMY,OAAN,EAAP,EAAwBR,QAAxB;AACAF,WAAOF,MAAMc,OAAN,EAAP,EAAwBN,IAAxB,CAA6B,IAA7B;AACD,GAVD;AAWD,CA9DD","file":"Queue.test.js","sourcesContent":["import Queue from '../Queue';\n\ndescribe('Queue', () => {\n  it('should create empty queue', () => {\n    const queue = new Queue();\n    expect(queue).not.toBeNull();\n    expect(queue.linkedList).not.toBeNull();\n  });\n\n  it('should enqueue data to queue', () => {\n    const queue = new Queue();\n\n    queue.enqueue(1);\n    queue.enqueue(2);\n\n    expect(queue.toString()).toBe('1,2');\n  });\n\n  it('should be possible to enqueue/dequeue objects', () => {\n    const queue = new Queue();\n\n    queue.enqueue({ value: 'test1', key: 'key1' });\n    queue.enqueue({ value: 'test2', key: 'key2' });\n\n    const stringifier = value => `${value.key}:${value.value}`;\n\n    expect(queue.toString(stringifier)).toBe('key1:test1,key2:test2');\n    expect(queue.dequeue().value).toBe('test1');\n    expect(queue.dequeue().value).toBe('test2');\n  });\n\n  it('should peek data from queue', () => {\n    const queue = new Queue();\n\n    expect(queue.peek()).toBeNull();\n\n    queue.enqueue(1);\n    queue.enqueue(2);\n\n    expect(queue.peek()).toBe(1);\n    expect(queue.peek()).toBe(1);\n  });\n\n  it('should check if queue is empty', () => {\n    const queue = new Queue();\n\n    expect(queue.isEmpty()).toBe(true);\n\n    queue.enqueue(1);\n\n    expect(queue.isEmpty()).toBe(false);\n  });\n\n  it('should dequeue from queue in FIFO order', () => {\n    const queue = new Queue();\n\n    queue.enqueue(1);\n    queue.enqueue(2);\n\n    expect(queue.dequeue()).toBe(1);\n    expect(queue.dequeue()).toBe(2);\n    expect(queue.dequeue()).toBeNull();\n    expect(queue.isEmpty()).toBe(true);\n  });\n});"]}