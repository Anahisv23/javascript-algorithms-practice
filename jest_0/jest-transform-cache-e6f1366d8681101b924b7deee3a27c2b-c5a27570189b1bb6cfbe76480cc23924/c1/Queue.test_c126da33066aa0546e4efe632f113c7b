0d52d1fc3d84a4f90454e3278f7f77b8
'use strict';

var _Queue = require('../Queue');

var _Queue2 = _interopRequireDefault(_Queue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Queue', function () {
  it('should create empty queue', function () {
    var queue = new _Queue2.default();
    expect(queue).not.toBeNull();
    expect(queue.linkedList).not.toBeNull();
  });

  it('should enqueue data to queue', function () {
    var queue = new _Queue2.default();

    queue.enqueue(1);
    queue.enqueue(2);

    expect(queue.toString()).toBe('1,2');
  });

  it('should be possible to enqueue/dequeue objects', function () {
    var queue = new _Queue2.default();

    queue.enqueue({ value: 'test1', key: 'key1' });
    queue.enqueue({ value: 'test2', key: 'key2' });

    var stringifier = function stringifier(value) {
      return value.key + ':' + value.value;
    };

    expect(queue.toString(stringifier)).toBe('key1:test1,key2:test2');
    expect(queue.dequeue().value).toBe('test1');
    expect(queue.dequeue().value).toBe('test2');
  });

  it('should peek data from queue', function () {
    var queue = new _Queue2.default();

    expect(queue.peek()).toBeNull();

    queue.enqueue(1);
    queue.enqueue(2);

    expect(queue.peek()).toBe(1);
    expect(queue.peek()).toBe(1);
  });

  it('should check if queue is empty', function () {
    var queue = new _Queue2.default();

    expect(queue.isEmpty()).toBe(true);

    queue.enqueue(1);

    expect(queue.isEmpty()).toBe(false);
  });

  it('should dequeue from queue in FIFO order', function () {
    var queue = new _Queue2.default();

    queue.enqueue(1);
    queue.enqueue(2);

    expect(queue.dequeue()).toBe(1);
    expect(queue.dequeue()).toBe(2);
    expect(queue.dequeue()).toBeNull();
    expect(queue.isEmpty()).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1ZXVlLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInF1ZXVlIiwiUXVldWUiLCJleHBlY3QiLCJub3QiLCJ0b0JlTnVsbCIsImxpbmtlZExpc3QiLCJlbnF1ZXVlIiwidG9TdHJpbmciLCJ0b0JlIiwidmFsdWUiLCJrZXkiLCJzdHJpbmdpZmllciIsImRlcXVldWUiLCJwZWVrIiwiaXNFbXB0eSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBRUFBLFNBQVMsT0FBVCxFQUFrQixZQUFNO0FBQ3RCQyxLQUFHLDJCQUFILEVBQWdDLFlBQU07QUFDcEMsUUFBTUMsUUFBUSxJQUFJQyxlQUFKLEVBQWQ7QUFDQUMsV0FBT0YsS0FBUCxFQUFjRyxHQUFkLENBQWtCQyxRQUFsQjtBQUNBRixXQUFPRixNQUFNSyxVQUFiLEVBQXlCRixHQUF6QixDQUE2QkMsUUFBN0I7QUFDRCxHQUpEOztBQU1BTCxLQUFHLDhCQUFILEVBQW1DLFlBQU07QUFDdkMsUUFBTUMsUUFBUSxJQUFJQyxlQUFKLEVBQWQ7O0FBRUFELFVBQU1NLE9BQU4sQ0FBYyxDQUFkO0FBQ0FOLFVBQU1NLE9BQU4sQ0FBYyxDQUFkOztBQUVBSixXQUFPRixNQUFNTyxRQUFOLEVBQVAsRUFBeUJDLElBQXpCLENBQThCLEtBQTlCO0FBQ0QsR0FQRDs7QUFTQVQsS0FBRywrQ0FBSCxFQUFvRCxZQUFNO0FBQ3hELFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkOztBQUVBRCxVQUFNTSxPQUFOLENBQWMsRUFBRUcsT0FBTyxPQUFULEVBQWtCQyxLQUFLLE1BQXZCLEVBQWQ7QUFDQVYsVUFBTU0sT0FBTixDQUFjLEVBQUVHLE9BQU8sT0FBVCxFQUFrQkMsS0FBSyxNQUF2QixFQUFkOztBQUVBLFFBQU1DLGNBQWMsU0FBZEEsV0FBYztBQUFBLGFBQVlGLE1BQU1DLEdBQWxCLFNBQXlCRCxNQUFNQSxLQUEvQjtBQUFBLEtBQXBCOztBQUVBUCxXQUFPRixNQUFNTyxRQUFOLENBQWVJLFdBQWYsQ0FBUCxFQUFvQ0gsSUFBcEMsQ0FBeUMsdUJBQXpDO0FBQ0FOLFdBQU9GLE1BQU1ZLE9BQU4sR0FBZ0JILEtBQXZCLEVBQThCRCxJQUE5QixDQUFtQyxPQUFuQztBQUNBTixXQUFPRixNQUFNWSxPQUFOLEdBQWdCSCxLQUF2QixFQUE4QkQsSUFBOUIsQ0FBbUMsT0FBbkM7QUFDRCxHQVhEOztBQWFBVCxLQUFHLDZCQUFILEVBQWtDLFlBQU07QUFDdEMsUUFBTUMsUUFBUSxJQUFJQyxlQUFKLEVBQWQ7O0FBRUFDLFdBQU9GLE1BQU1hLElBQU4sRUFBUCxFQUFxQlQsUUFBckI7O0FBRUFKLFVBQU1NLE9BQU4sQ0FBYyxDQUFkO0FBQ0FOLFVBQU1NLE9BQU4sQ0FBYyxDQUFkOztBQUVBSixXQUFPRixNQUFNYSxJQUFOLEVBQVAsRUFBcUJMLElBQXJCLENBQTBCLENBQTFCO0FBQ0FOLFdBQU9GLE1BQU1hLElBQU4sRUFBUCxFQUFxQkwsSUFBckIsQ0FBMEIsQ0FBMUI7QUFDRCxHQVZEOztBQVlBVCxLQUFHLGdDQUFILEVBQXFDLFlBQU07QUFDekMsUUFBTUMsUUFBUSxJQUFJQyxlQUFKLEVBQWQ7O0FBRUFDLFdBQU9GLE1BQU1jLE9BQU4sRUFBUCxFQUF3Qk4sSUFBeEIsQ0FBNkIsSUFBN0I7O0FBRUFSLFVBQU1NLE9BQU4sQ0FBYyxDQUFkOztBQUVBSixXQUFPRixNQUFNYyxPQUFOLEVBQVAsRUFBd0JOLElBQXhCLENBQTZCLEtBQTdCO0FBQ0QsR0FSRDs7QUFVQVQsS0FBRyx5Q0FBSCxFQUE4QyxZQUFNO0FBQ2xELFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkOztBQUVBRCxVQUFNTSxPQUFOLENBQWMsQ0FBZDtBQUNBTixVQUFNTSxPQUFOLENBQWMsQ0FBZDs7QUFFQUosV0FBT0YsTUFBTVksT0FBTixFQUFQLEVBQXdCSixJQUF4QixDQUE2QixDQUE3QjtBQUNBTixXQUFPRixNQUFNWSxPQUFOLEVBQVAsRUFBd0JKLElBQXhCLENBQTZCLENBQTdCO0FBQ0FOLFdBQU9GLE1BQU1ZLE9BQU4sRUFBUCxFQUF3QlIsUUFBeEI7QUFDQUYsV0FBT0YsTUFBTWMsT0FBTixFQUFQLEVBQXdCTixJQUF4QixDQUE2QixJQUE3QjtBQUNELEdBVkQ7QUFXRCxDQTlERCIsImZpbGUiOiJRdWV1ZS50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXVlIGZyb20gJy4uL1F1ZXVlJztcblxuZGVzY3JpYmUoJ1F1ZXVlJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBlbXB0eSBxdWV1ZScsICgpID0+IHtcbiAgICBjb25zdCBxdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuICAgIGV4cGVjdChxdWV1ZSkubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHF1ZXVlLmxpbmtlZExpc3QpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVucXVldWUgZGF0YSB0byBxdWV1ZScsICgpID0+IHtcbiAgICBjb25zdCBxdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuXG4gICAgcXVldWUuZW5xdWV1ZSgxKTtcbiAgICBxdWV1ZS5lbnF1ZXVlKDIpO1xuXG4gICAgZXhwZWN0KHF1ZXVlLnRvU3RyaW5nKCkpLnRvQmUoJzEsMicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIHBvc3NpYmxlIHRvIGVucXVldWUvZGVxdWV1ZSBvYmplY3RzJywgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cbiAgICBxdWV1ZS5lbnF1ZXVlKHsgdmFsdWU6ICd0ZXN0MScsIGtleTogJ2tleTEnIH0pO1xuICAgIHF1ZXVlLmVucXVldWUoeyB2YWx1ZTogJ3Rlc3QyJywga2V5OiAna2V5MicgfSk7XG5cbiAgICBjb25zdCBzdHJpbmdpZmllciA9IHZhbHVlID0+IGAke3ZhbHVlLmtleX06JHt2YWx1ZS52YWx1ZX1gO1xuXG4gICAgZXhwZWN0KHF1ZXVlLnRvU3RyaW5nKHN0cmluZ2lmaWVyKSkudG9CZSgna2V5MTp0ZXN0MSxrZXkyOnRlc3QyJyk7XG4gICAgZXhwZWN0KHF1ZXVlLmRlcXVldWUoKS52YWx1ZSkudG9CZSgndGVzdDEnKTtcbiAgICBleHBlY3QocXVldWUuZGVxdWV1ZSgpLnZhbHVlKS50b0JlKCd0ZXN0MicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHBlZWsgZGF0YSBmcm9tIHF1ZXVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cbiAgICBleHBlY3QocXVldWUucGVlaygpKS50b0JlTnVsbCgpO1xuXG4gICAgcXVldWUuZW5xdWV1ZSgxKTtcbiAgICBxdWV1ZS5lbnF1ZXVlKDIpO1xuXG4gICAgZXhwZWN0KHF1ZXVlLnBlZWsoKSkudG9CZSgxKTtcbiAgICBleHBlY3QocXVldWUucGVlaygpKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNoZWNrIGlmIHF1ZXVlIGlzIGVtcHR5JywgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cbiAgICBleHBlY3QocXVldWUuaXNFbXB0eSgpKS50b0JlKHRydWUpO1xuXG4gICAgcXVldWUuZW5xdWV1ZSgxKTtcblxuICAgIGV4cGVjdChxdWV1ZS5pc0VtcHR5KCkpLnRvQmUoZmFsc2UpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlcXVldWUgZnJvbSBxdWV1ZSBpbiBGSUZPIG9yZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cbiAgICBxdWV1ZS5lbnF1ZXVlKDEpO1xuICAgIHF1ZXVlLmVucXVldWUoMik7XG5cbiAgICBleHBlY3QocXVldWUuZGVxdWV1ZSgpKS50b0JlKDEpO1xuICAgIGV4cGVjdChxdWV1ZS5kZXF1ZXVlKCkpLnRvQmUoMik7XG4gICAgZXhwZWN0KHF1ZXVlLmRlcXVldWUoKSkudG9CZU51bGwoKTtcbiAgICBleHBlY3QocXVldWUuaXNFbXB0eSgpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pOyJdfQ==