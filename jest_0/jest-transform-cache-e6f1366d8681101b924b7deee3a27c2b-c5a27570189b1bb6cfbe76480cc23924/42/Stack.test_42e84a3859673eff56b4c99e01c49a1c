7712652473b5197c667e9ef198be2a78
'use strict';

var _Stack = require('../Stack');

var _Stack2 = _interopRequireDefault(_Stack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Stack', function () {
  it('should create empty stack', function () {
    var stack = new _Stack2.default();
    expect(stack).not.toBeNull();
    expect(stack.linkedList).not.toBeNull();
  });

  it('should stack data to stack', function () {
    var stack = new _Stack2.default();

    stack.push(1);
    stack.push(2);

    expect(stack.toString()).toBe('2,1');
  });

  it('should peek data from stack', function () {
    var stack = new _Stack2.default();

    expect(stack.peek()).toBeNull();

    stack.push(1);
    stack.push(2);

    expect(stack.peek()).toBe(2);
    expect(stack.peek()).toBe(2);
  });

  it('should check if stack is empty', function () {
    var stack = new _Stack2.default();

    expect(stack.isEmpty()).toBe(true);

    stack.push(1);

    expect(stack.isEmpty()).toBe(false);
  });

  it('should pop data from stack', function () {
    var stack = new _Stack2.default();

    stack.push(1);
    stack.push(2);

    expect(stack.pop()).toBe(2);
    expect(stack.pop()).toBe(1);
    expect(stack.pop()).toBeNull();
    expect(stack.isEmpty()).toBe(true);
  });

  it('should be possible to push/pop objects', function () {
    var stack = new _Stack2.default();

    stack.push({ value: 'test1', key: 'key1' });
    stack.push({ value: 'test2', key: 'key2' });

    var stringifier = function stringifier(value) {
      return value.key + ':' + value.value;
    };

    expect(stack.toString(stringifier)).toBe('key2:test2,key1:test1');
    expect(stack.pop().value).toBe('test2');
    expect(stack.pop().value).toBe('test1');
  });

  it('should be possible to convert stack to array', function () {
    var stack = new _Stack2.default();

    expect(stack.peek()).toBeNull();

    stack.push(1);
    stack.push(2);
    stack.push(3);

    expect(stack.toArray()).toEqual([3, 2, 1]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0YWNrLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInN0YWNrIiwiU3RhY2siLCJleHBlY3QiLCJub3QiLCJ0b0JlTnVsbCIsImxpbmtlZExpc3QiLCJwdXNoIiwidG9TdHJpbmciLCJ0b0JlIiwicGVlayIsImlzRW1wdHkiLCJwb3AiLCJ2YWx1ZSIsImtleSIsInN0cmluZ2lmaWVyIiwidG9BcnJheSIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBQSxTQUFTLE9BQVQsRUFBa0IsWUFBTTtBQUN0QkMsS0FBRywyQkFBSCxFQUFnQyxZQUFNO0FBQ3BDLFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkO0FBQ0FDLFdBQU9GLEtBQVAsRUFBY0csR0FBZCxDQUFrQkMsUUFBbEI7QUFDQUYsV0FBT0YsTUFBTUssVUFBYixFQUF5QkYsR0FBekIsQ0FBNkJDLFFBQTdCO0FBQ0QsR0FKRDs7QUFNQUwsS0FBRyw0QkFBSCxFQUFpQyxZQUFNO0FBQ3JDLFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkOztBQUVBRCxVQUFNTSxJQUFOLENBQVcsQ0FBWDtBQUNBTixVQUFNTSxJQUFOLENBQVcsQ0FBWDs7QUFFQUosV0FBT0YsTUFBTU8sUUFBTixFQUFQLEVBQXlCQyxJQUF6QixDQUE4QixLQUE5QjtBQUNELEdBUEQ7O0FBU0FULEtBQUcsNkJBQUgsRUFBa0MsWUFBTTtBQUN0QyxRQUFNQyxRQUFRLElBQUlDLGVBQUosRUFBZDs7QUFFQUMsV0FBT0YsTUFBTVMsSUFBTixFQUFQLEVBQXFCTCxRQUFyQjs7QUFFQUosVUFBTU0sSUFBTixDQUFXLENBQVg7QUFDQU4sVUFBTU0sSUFBTixDQUFXLENBQVg7O0FBRUFKLFdBQU9GLE1BQU1TLElBQU4sRUFBUCxFQUFxQkQsSUFBckIsQ0FBMEIsQ0FBMUI7QUFDQU4sV0FBT0YsTUFBTVMsSUFBTixFQUFQLEVBQXFCRCxJQUFyQixDQUEwQixDQUExQjtBQUNELEdBVkQ7O0FBWUFULEtBQUcsZ0NBQUgsRUFBcUMsWUFBTTtBQUN6QyxRQUFNQyxRQUFRLElBQUlDLGVBQUosRUFBZDs7QUFFQUMsV0FBT0YsTUFBTVUsT0FBTixFQUFQLEVBQXdCRixJQUF4QixDQUE2QixJQUE3Qjs7QUFFQVIsVUFBTU0sSUFBTixDQUFXLENBQVg7O0FBRUFKLFdBQU9GLE1BQU1VLE9BQU4sRUFBUCxFQUF3QkYsSUFBeEIsQ0FBNkIsS0FBN0I7QUFDRCxHQVJEOztBQVVBVCxLQUFHLDRCQUFILEVBQWlDLFlBQU07QUFDckMsUUFBTUMsUUFBUSxJQUFJQyxlQUFKLEVBQWQ7O0FBRUFELFVBQU1NLElBQU4sQ0FBVyxDQUFYO0FBQ0FOLFVBQU1NLElBQU4sQ0FBVyxDQUFYOztBQUVBSixXQUFPRixNQUFNVyxHQUFOLEVBQVAsRUFBb0JILElBQXBCLENBQXlCLENBQXpCO0FBQ0FOLFdBQU9GLE1BQU1XLEdBQU4sRUFBUCxFQUFvQkgsSUFBcEIsQ0FBeUIsQ0FBekI7QUFDQU4sV0FBT0YsTUFBTVcsR0FBTixFQUFQLEVBQW9CUCxRQUFwQjtBQUNBRixXQUFPRixNQUFNVSxPQUFOLEVBQVAsRUFBd0JGLElBQXhCLENBQTZCLElBQTdCO0FBQ0QsR0FWRDs7QUFZQVQsS0FBRyx3Q0FBSCxFQUE2QyxZQUFNO0FBQ2pELFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkOztBQUVBRCxVQUFNTSxJQUFOLENBQVcsRUFBRU0sT0FBTyxPQUFULEVBQWtCQyxLQUFLLE1BQXZCLEVBQVg7QUFDQWIsVUFBTU0sSUFBTixDQUFXLEVBQUVNLE9BQU8sT0FBVCxFQUFrQkMsS0FBSyxNQUF2QixFQUFYOztBQUVBLFFBQU1DLGNBQWMsU0FBZEEsV0FBYztBQUFBLGFBQVlGLE1BQU1DLEdBQWxCLFNBQXlCRCxNQUFNQSxLQUEvQjtBQUFBLEtBQXBCOztBQUVBVixXQUFPRixNQUFNTyxRQUFOLENBQWVPLFdBQWYsQ0FBUCxFQUFvQ04sSUFBcEMsQ0FBeUMsdUJBQXpDO0FBQ0FOLFdBQU9GLE1BQU1XLEdBQU4sR0FBWUMsS0FBbkIsRUFBMEJKLElBQTFCLENBQStCLE9BQS9CO0FBQ0FOLFdBQU9GLE1BQU1XLEdBQU4sR0FBWUMsS0FBbkIsRUFBMEJKLElBQTFCLENBQStCLE9BQS9CO0FBQ0QsR0FYRDs7QUFhQVQsS0FBRyw4Q0FBSCxFQUFtRCxZQUFNO0FBQ3ZELFFBQU1DLFFBQVEsSUFBSUMsZUFBSixFQUFkOztBQUVBQyxXQUFPRixNQUFNUyxJQUFOLEVBQVAsRUFBcUJMLFFBQXJCOztBQUVBSixVQUFNTSxJQUFOLENBQVcsQ0FBWDtBQUNBTixVQUFNTSxJQUFOLENBQVcsQ0FBWDtBQUNBTixVQUFNTSxJQUFOLENBQVcsQ0FBWDs7QUFFQUosV0FBT0YsTUFBTWUsT0FBTixFQUFQLEVBQXdCQyxPQUF4QixDQUFnQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFoQztBQUNELEdBVkQ7QUFXRCxDQTFFRCIsImZpbGUiOiJTdGFjay50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0YWNrIGZyb20gJy4uL1N0YWNrJztcblxuZGVzY3JpYmUoJ1N0YWNrJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBlbXB0eSBzdGFjaycsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGV4cGVjdChzdGFjaykubm90LnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHN0YWNrLmxpbmtlZExpc3QpLm5vdC50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHN0YWNrIGRhdGEgdG8gc3RhY2snLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIHN0YWNrLnB1c2goMSk7XG4gICAgc3RhY2sucHVzaCgyKTtcblxuICAgIGV4cGVjdChzdGFjay50b1N0cmluZygpKS50b0JlKCcyLDEnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwZWVrIGRhdGEgZnJvbSBzdGFjaycsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgZXhwZWN0KHN0YWNrLnBlZWsoKSkudG9CZU51bGwoKTtcblxuICAgIHN0YWNrLnB1c2goMSk7XG4gICAgc3RhY2sucHVzaCgyKTtcblxuICAgIGV4cGVjdChzdGFjay5wZWVrKCkpLnRvQmUoMik7XG4gICAgZXhwZWN0KHN0YWNrLnBlZWsoKSkudG9CZSgyKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjaGVjayBpZiBzdGFjayBpcyBlbXB0eScsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgZXhwZWN0KHN0YWNrLmlzRW1wdHkoKSkudG9CZSh0cnVlKTtcblxuICAgIHN0YWNrLnB1c2goMSk7XG5cbiAgICBleHBlY3Qoc3RhY2suaXNFbXB0eSgpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwb3AgZGF0YSBmcm9tIHN0YWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICBzdGFjay5wdXNoKDEpO1xuICAgIHN0YWNrLnB1c2goMik7XG5cbiAgICBleHBlY3Qoc3RhY2sucG9wKCkpLnRvQmUoMik7XG4gICAgZXhwZWN0KHN0YWNrLnBvcCgpKS50b0JlKDEpO1xuICAgIGV4cGVjdChzdGFjay5wb3AoKSkudG9CZU51bGwoKTtcbiAgICBleHBlY3Qoc3RhY2suaXNFbXB0eSgpKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIHBvc3NpYmxlIHRvIHB1c2gvcG9wIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIHN0YWNrLnB1c2goeyB2YWx1ZTogJ3Rlc3QxJywga2V5OiAna2V5MScgfSk7XG4gICAgc3RhY2sucHVzaCh7IHZhbHVlOiAndGVzdDInLCBrZXk6ICdrZXkyJyB9KTtcblxuICAgIGNvbnN0IHN0cmluZ2lmaWVyID0gdmFsdWUgPT4gYCR7dmFsdWUua2V5fToke3ZhbHVlLnZhbHVlfWA7XG5cbiAgICBleHBlY3Qoc3RhY2sudG9TdHJpbmcoc3RyaW5naWZpZXIpKS50b0JlKCdrZXkyOnRlc3QyLGtleTE6dGVzdDEnKTtcbiAgICBleHBlY3Qoc3RhY2sucG9wKCkudmFsdWUpLnRvQmUoJ3Rlc3QyJyk7XG4gICAgZXhwZWN0KHN0YWNrLnBvcCgpLnZhbHVlKS50b0JlKCd0ZXN0MScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIHBvc3NpYmxlIHRvIGNvbnZlcnQgc3RhY2sgdG8gYXJyYXknLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIGV4cGVjdChzdGFjay5wZWVrKCkpLnRvQmVOdWxsKCk7XG5cbiAgICBzdGFjay5wdXNoKDEpO1xuICAgIHN0YWNrLnB1c2goMik7XG4gICAgc3RhY2sucHVzaCgzKTtcblxuICAgIGV4cGVjdChzdGFjay50b0FycmF5KCkpLnRvRXF1YWwoWzMsIDIsIDFdKTtcbiAgfSk7XG59KTsiXX0=