{"version":3,"sources":["Stack.test.js"],"names":["describe","it","stack","Stack","expect","not","toBeNull","linkedList","push","toString","toBe","peek","isEmpty","pop","value","key","stringifier","toArray","toEqual"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;AACAC,WAAOF,KAAP,EAAcG,GAAd,CAAkBC,QAAlB;AACAF,WAAOF,MAAMK,UAAb,EAAyBF,GAAzB,CAA6BC,QAA7B;AACD,GAJD;;AAMAL,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,IAAN,CAAW,CAAX;AACAN,UAAMM,IAAN,CAAW,CAAX;;AAEAJ,WAAOF,MAAMO,QAAN,EAAP,EAAyBC,IAAzB,CAA8B,KAA9B;AACD,GAPD;;AASAT,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAC,WAAOF,MAAMS,IAAN,EAAP,EAAqBL,QAArB;;AAEAJ,UAAMM,IAAN,CAAW,CAAX;AACAN,UAAMM,IAAN,CAAW,CAAX;;AAEAJ,WAAOF,MAAMS,IAAN,EAAP,EAAqBD,IAArB,CAA0B,CAA1B;AACAN,WAAOF,MAAMS,IAAN,EAAP,EAAqBD,IAArB,CAA0B,CAA1B;AACD,GAVD;;AAYAT,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAC,WAAOF,MAAMU,OAAN,EAAP,EAAwBF,IAAxB,CAA6B,IAA7B;;AAEAR,UAAMM,IAAN,CAAW,CAAX;;AAEAJ,WAAOF,MAAMU,OAAN,EAAP,EAAwBF,IAAxB,CAA6B,KAA7B;AACD,GARD;;AAUAT,KAAG,4BAAH,EAAiC,YAAM;AACrC,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,IAAN,CAAW,CAAX;AACAN,UAAMM,IAAN,CAAW,CAAX;;AAEAJ,WAAOF,MAAMW,GAAN,EAAP,EAAoBH,IAApB,CAAyB,CAAzB;AACAN,WAAOF,MAAMW,GAAN,EAAP,EAAoBH,IAApB,CAAyB,CAAzB;AACAN,WAAOF,MAAMW,GAAN,EAAP,EAAoBP,QAApB;AACAF,WAAOF,MAAMU,OAAN,EAAP,EAAwBF,IAAxB,CAA6B,IAA7B;AACD,GAVD;;AAYAT,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAD,UAAMM,IAAN,CAAW,EAAEM,OAAO,OAAT,EAAkBC,KAAK,MAAvB,EAAX;AACAb,UAAMM,IAAN,CAAW,EAAEM,OAAO,OAAT,EAAkBC,KAAK,MAAvB,EAAX;;AAEA,QAAMC,cAAc,SAAdA,WAAc;AAAA,aAAYF,MAAMC,GAAlB,SAAyBD,MAAMA,KAA/B;AAAA,KAApB;;AAEAV,WAAOF,MAAMO,QAAN,CAAeO,WAAf,CAAP,EAAoCN,IAApC,CAAyC,uBAAzC;AACAN,WAAOF,MAAMW,GAAN,GAAYC,KAAnB,EAA0BJ,IAA1B,CAA+B,OAA/B;AACAN,WAAOF,MAAMW,GAAN,GAAYC,KAAnB,EAA0BJ,IAA1B,CAA+B,OAA/B;AACD,GAXD;;AAaAT,KAAG,8CAAH,EAAmD,YAAM;AACvD,QAAMC,QAAQ,IAAIC,eAAJ,EAAd;;AAEAC,WAAOF,MAAMS,IAAN,EAAP,EAAqBL,QAArB;;AAEAJ,UAAMM,IAAN,CAAW,CAAX;AACAN,UAAMM,IAAN,CAAW,CAAX;AACAN,UAAMM,IAAN,CAAW,CAAX;;AAEAJ,WAAOF,MAAMe,OAAN,EAAP,EAAwBC,OAAxB,CAAgC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhC;AACD,GAVD;AAWD,CA1ED","file":"Stack.test.js","sourcesContent":["import Stack from '../Stack';\n\ndescribe('Stack', () => {\n  it('should create empty stack', () => {\n    const stack = new Stack();\n    expect(stack).not.toBeNull();\n    expect(stack.linkedList).not.toBeNull();\n  });\n\n  it('should stack data to stack', () => {\n    const stack = new Stack();\n\n    stack.push(1);\n    stack.push(2);\n\n    expect(stack.toString()).toBe('2,1');\n  });\n\n  it('should peek data from stack', () => {\n    const stack = new Stack();\n\n    expect(stack.peek()).toBeNull();\n\n    stack.push(1);\n    stack.push(2);\n\n    expect(stack.peek()).toBe(2);\n    expect(stack.peek()).toBe(2);\n  });\n\n  it('should check if stack is empty', () => {\n    const stack = new Stack();\n\n    expect(stack.isEmpty()).toBe(true);\n\n    stack.push(1);\n\n    expect(stack.isEmpty()).toBe(false);\n  });\n\n  it('should pop data from stack', () => {\n    const stack = new Stack();\n\n    stack.push(1);\n    stack.push(2);\n\n    expect(stack.pop()).toBe(2);\n    expect(stack.pop()).toBe(1);\n    expect(stack.pop()).toBeNull();\n    expect(stack.isEmpty()).toBe(true);\n  });\n\n  it('should be possible to push/pop objects', () => {\n    const stack = new Stack();\n\n    stack.push({ value: 'test1', key: 'key1' });\n    stack.push({ value: 'test2', key: 'key2' });\n\n    const stringifier = value => `${value.key}:${value.value}`;\n\n    expect(stack.toString(stringifier)).toBe('key2:test2,key1:test1');\n    expect(stack.pop().value).toBe('test2');\n    expect(stack.pop().value).toBe('test1');\n  });\n\n  it('should be possible to convert stack to array', () => {\n    const stack = new Stack();\n\n    expect(stack.peek()).toBeNull();\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n\n    expect(stack.toArray()).toEqual([3, 2, 1]);\n  });\n});"]}